---
import Logo from "../Logo.astro";
import "@styles/effects/glass.css";

const routes = [
  { path: "/", label: "Inicio" },
  { path: "/#quienes-somos", label: "Quienes Somos" },
  { path: "/#FAQ", label: "FAQ" },
  { path: "/challenges", label: "Opera y Gana" },
];

// En lugar de usar Astro.originPathname, usaremos JavaScript para detectar la página activa
---

<nav id="nav">
  <Logo />

  <!-- Desktop Menu -->
  <ul class="hidden md:flex justify-between items-center relative">
    {
      routes.map(({ path, label }) => (
        <ul>
          <a
            href={path}
            data-path={path}
            class:list={[
              "mx-1.5 lg:mx-6",
              "nav-link",
              "text-sm lg:text-base",
            ]}
          >
            {label}
          </a>
        </ul>
      ))
    }

    <div class="nav-indicator"></div>
  </ul>

  <!-- Mobile Menu Button -->
  <button id="mobile-menu-btn" class="md:hidden flex flex-col gap-1 p-2">
    <span class="w-6 h-0.5 bg-white transition-all duration-300"></span>
    <span class="w-6 h-0.5 bg-white transition-all duration-300"></span>
    <span class="w-6 h-0.5 bg-white transition-all duration-300"></span>
  </button>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="fixed top-[80px] sm:top-[90px] left-0 right-0 bg-secondary/95 backdrop-blur-sm transform -translate-y-full opacity-0 transition-all duration-300 md:hidden z-40">
    <ul class="flex flex-col p-6 space-y-4">
      {
        routes.map(({ path, label }) => (
          <li>
            <a
              href={path}
              class="block py-3 px-4 text-white hover:text-primary transition-colors text-lg font-medium mobile-link"
            >
              {label}
            </a>
          </li>
        ))
      }
      <li class="pt-4 space-y-3">
        <a class="block bg-transparent border border-primary text-primary btn text-center py-3 mobile-link" href="auth#login">
          Iniciar sesión
        </a>
        <a class="block bg-white text-secondary btn text-center py-3 mobile-link" href="/challenges">Empezar</a>
      </li>
    </ul>
  </div>

  <!-- Desktop Auth Buttons -->
  <div class="hidden md:flex gap-3">
    <a class="bg-transparent text-primary-text btn text-xs lg:text-sm" href="auth#login"
      >Iniciar sesión</a
    >
    <a class="bg-white text-secondary btn text-xs lg:text-sm">Empezar</a>
  </div>
</nav>

<style>
  @import "tailwindcss";

  #nav {
    @apply flex justify-between items-center px-4 sm:px-6 lg:px-10 py-4 lg:py-7 w-[100vw] fixed z-50 border-b-1;
    transition:
      border-color ease-in-out 0.4s,
      background-color ease-out 0.25s;
  }

  #nav:not(.scrolled) {
    @apply bg-transparent border-white/0 backdrop-blur-[0px];
  }

  #nav.scrolled {
    @apply bg-gray-400/5;
    @apply border-white/25;
    @apply backdrop-blur-sm;
  }

  .nav-indicator {
    @apply absolute bottom-[-.2rem] h-1 bg-white rounded-sm;
    transition:
      left 0.3s ease,
      width 0.3s ease;
    pointer-events: none;
  }
</style>

<script>
  function onScroll() {
    const header = document.getElementById("nav");
    if (!header) return;

    if (window.scrollY > 100) {
      header.classList.add("scrolled");
    } else {
      header.classList.remove("scrolled");
    }
  }

  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuBtn = document.getElementById("mobile-menu-btn");
    const mobileMenu = document.getElementById("mobile-menu");
    
    if (!mobileMenuBtn || !mobileMenu) {
      console.log("Mobile menu elements not found");
      return;
    }

    console.log("Mobile menu initialized");

    mobileMenuBtn.addEventListener("click", (e) => {
      e.preventDefault();
      console.log("Mobile menu button clicked");
      
      const isOpen = mobileMenu.classList.contains("translate-y-0");
      console.log("Menu is open:", isOpen);
      
      if (isOpen) {
        // Close menu
        mobileMenu.classList.remove("translate-y-0", "opacity-100");
        mobileMenu.classList.add("-translate-y-full", "opacity-0");
        // Reset hamburger
        const spans = mobileMenuBtn.querySelectorAll("span");
        spans[0].style.transform = "rotate(0deg)";
        spans[0].style.transformOrigin = "center";
        spans[1].style.opacity = "1";
        spans[2].style.transform = "rotate(0deg)";
        spans[2].style.transformOrigin = "center";
      } else {
        // Open menu
        mobileMenu.classList.remove("-translate-y-full", "opacity-0");
        mobileMenu.classList.add("translate-y-0", "opacity-100");
        // Animate hamburger to X
        const spans = mobileMenuBtn.querySelectorAll("span");
        spans[0].style.transform = "rotate(45deg) translate(5px, 5px)";
        spans[0].style.transformOrigin = "center";
        spans[1].style.opacity = "0";
        spans[2].style.transform = "rotate(-45deg) translate(7px, -6px)";
        spans[2].style.transformOrigin = "center";
      }
    });

    // Close mobile menu when clicking on links
    const mobileLinks = mobileMenu.querySelectorAll(".mobile-link");
    mobileLinks.forEach(link => {
      link.addEventListener("click", () => {
        mobileMenu.classList.remove("translate-y-0", "opacity-100");
        mobileMenu.classList.add("-translate-y-full", "opacity-0");
        // Reset hamburger
        const spans = mobileMenuBtn.querySelectorAll("span");
        spans[0].style.transform = "rotate(0deg)";
        spans[1].style.opacity = "1";
        spans[2].style.transform = "rotate(0deg)";
      });
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e: any) => {
      if (!mobileMenu.contains(e.target) && !mobileMenuBtn.contains(e.target)) {
        if (mobileMenu.classList.contains("translate-y-0")) {
          mobileMenu.classList.remove("translate-y-0", "opacity-100");
          mobileMenu.classList.add("-translate-y-full", "opacity-0");
          // Reset hamburger
          const spans = mobileMenuBtn.querySelectorAll("span");
          spans[0].style.transform = "rotate(0deg)";
          spans[1].style.opacity = "1";
          spans[2].style.transform = "rotate(0deg)";
        }
      }
    });
  }

  document.addEventListener("scroll", onScroll);
  
  // Initialize immediately and also on DOMContentLoaded as fallback
  initMobileMenu();
  document.addEventListener("DOMContentLoaded", () => {
    initMobileMenu();
  });
  
  // Also initialize on astro:page-load for client-side navigation
  document.addEventListener("astro:page-load", () => {
    initMobileMenu();
  });
</script>

<script type="module">
  const sections = [
    { id: null, path: "/" }, // fallback para arriba del todo
    { id: "quienes-somos", path: "/#quienes-somos" },
    { id: "FAQ", path: "/#FAQ" },
  ];

  const secondSection = document.getElementById("quienes-somos");
  const thirdSection = document.getElementById("FAQ");

  const navLinks = document.querySelectorAll(".nav-link");

  function updateNavIndicator() {
    const activeLink = document.querySelector(".nav-link.is-active");
    const indicator = document.querySelector(".nav-indicator");

    if (!activeLink || !indicator) return;

    const { offsetLeft, offsetWidth } = activeLink;
    indicator.style.left = `${offsetLeft}px`;
    indicator.style.width = `${offsetWidth}px`;
  }

  function updateActiveLink(path) {
    navLinks.forEach((link) => {
      const isActive = link.dataset.path === path;
      link.classList.toggle("text-primary", isActive);
      link.classList.toggle("text-primary-text", !isActive);
      link.classList.toggle("is-active", isActive);
      
      // Agregar margen para elemento activo
      if (isActive) {
        link.classList.add("mx-5");
        link.classList.remove("mx-1.5", "lg:mx-6");
      } else {
        link.classList.remove("mx-5");
        link.classList.add("mx-1.5", "lg:mx-6");
      }
    });
  }

  // Inicializar el estado activo al cargar la página
  function initActiveState() {
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;
    let activePath = currentPath;
    
    if (currentPath === "/" && currentHash) {
      activePath = currentPath + currentHash;
    }
    
    updateActiveLink(activePath);
    updateNavIndicator();
  }

  function updateStyle(initial = false) {
    if ("/" != window.location.pathname) return;
    const scrollPosition = window.scrollY;

    let activeSectionPath = sections[0].path;
    if (thirdSection && scrollPosition + 116 // este es el padding que le dejé a la sección (pt-29)!
    >= thirdSection.offsetTop) { 
      activeSectionPath = sections[2].path;
    } else if (secondSection && scrollPosition >= secondSection.offsetTop) {
      activeSectionPath = sections[1].path;
    }

    if (
      window.location.pathname + window.location.hash !== activeSectionPath ||
      initial
    ) {
      history.replaceState(null, "", activeSectionPath);
      updateActiveLink(activeSectionPath);
      updateNavIndicator();
    }
  }

  // Inicializar después de definir todas las funciones
  initActiveState();
  updateStyle(true);

  function updateStyle(initial = false) {
    if ("/" != window.location.pathname) return;
    const scrollPosition = window.scrollY;

    let activeSectionPath = sections[0].path;
    if (thirdSection && scrollPosition + 116 // este es el padding que le dejé a la sección (pt-29)!
    >= thirdSection.offsetTop) { 
      activeSectionPath = sections[2].path;
    } else if (secondSection && scrollPosition >= secondSection.offsetTop) {
      activeSectionPath = sections[1].path;
    }

    if (
      window.location.pathname + window.location.hash !== activeSectionPath ||
      initial
    ) {
      history.replaceState(null, "", activeSectionPath);
      updateActiveLink(activeSectionPath);
      updateNavIndicator();
    }
  }

  window.addEventListener("scroll", () => updateStyle());
  window.addEventListener("hashchange", () => updateStyle());
  updateNavIndicator();
</script>
